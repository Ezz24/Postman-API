{
	"info": {
		"_postman_id": "1360adb8-3c41-47f1-aab4-3c99df2b806d",
		"name": "Postman API Creation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30172850"
	},
	"item": [
		{
			"name": "Get Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"pm.test(\"Response is an array of objects with specific properties\", function () {",
							"    var jsonData = pm.response.json();",
							"    jsonData.forEach(function(user) {",
							"        pm.expect(user).to.have.property('id');",
							"        pm.expect(user).to.have.property('name');",
							"        pm.expect(user).to.have.property('username');",
							"        pm.expect(user).to.have.property('email');",
							"        pm.expect(user.address).to.have.property('street');",
							"        pm.expect(user.address).to.have.property('suite');",
							"        pm.expect(user.address).to.have.property('city');",
							"        pm.expect(user.address).to.have.property('zipcode');",
							"        pm.expect(user.address.geo).to.have.property('lat');",
							"        pm.expect(user.address.geo).to.have.property('lng');",
							"        pm.expect(user).to.have.property('phone');",
							"        pm.expect(user).to.have.property('website');",
							"        pm.expect(user.company).to.have.property('name');",
							"        pm.expect(user.company).to.have.property('catchPhrase');",
							"        pm.expect(user.company).to.have.property('bs');",
							"    });",
							"});",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Each user's email is in a valid email format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user.email).to.match(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i, \"Email format is not valid\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Each user's phone number is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user.phone).to.match(/^\\d{3}-\\d{3}-\\d{4}$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Each user's website is a valid URL\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user.website).to.match(/^https?:\\/\\/www\\..+/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Each user's company name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(user) {",
							"    pm.expect(user.company.name).to.be.a('string').and.to.have.lengthOf.at.least(1);",
							"  });",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		}
	]
}